syntax = "proto3";
package ET;

//ResponseType M2C_TestResponse
message C2M_TestRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	string request = 1;
}

message M2C_TestResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string response = 1;
}

//ResponseType Actor_TransferResponse
message Actor_TransferRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	int32 MapIndex = 1;
}

message Actor_TransferResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType G2C_EnterMap
message C2G_EnterMap // IRequest
{
	int32 RpcId = 1;
}

message G2C_EnterMap // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	// 自己unitId
	int64 MyId = 4;
}

message MoveInfo
{
	repeated float X = 1;
	repeated float Y = 2;
	repeated float Z = 3;

	float A = 4;
	float B = 5;
	float C = 6;
	float W = 7;
	int32 TurnSpeed = 8;
}

message UnitInfo
{
	int64 UnitId = 1;
	int32 ConfigId = 2;
	int32 Type = 3;
	float X = 4;
	float Y = 5;
	float Z = 6;
	float ForwardX = 7;
	float ForwardY = 8;
	float ForwardZ = 9;
	repeated int32 Ks = 10;
	repeated int64 Vs = 11;
	MoveInfo MoveInfo = 12;
}

message M2C_CreateUnits // IActorMessage
{
	repeated UnitInfo Units = 2;
}

message M2C_CreateMyUnit // IActorMessage
{
	UnitInfo Unit = 1;
}

message M2C_StartSceneChange // IActorMessage
{
	int64 SceneInstanceId = 1;
	string SceneName = 2;	
}

message M2C_StartSceneChangeL //IActorMessage
{
	int64 SceneInstanceId = 1;
	string SceneName = 2;
}

message M2C_RemoveUnits // IActorMessage
{
	repeated int64 Units = 2;
}

message C2M_PathfindingResult // IActorLocationMessage
{
	int32 RpcId = 90;

	float X = 1;
	float Y = 2;
	float Z = 3;
}

message C2M_Stop // IActorLocationMessage
{
	int32 RpcId = 90;
}

message M2C_PathfindingResult // IActorMessage
{
	int64 Id = 1;

	float X = 2;
	float Y = 3;
	float Z = 4;

	repeated float Xs = 5;
	repeated float Ys = 6;
	repeated float Zs = 7;
}

message M2C_Stop // IActorMessage
{
	int32 Error = 1;

	int64 Id = 2;
	float X = 3;
	float Y = 4;
	float Z = 5;

	float A = 6;
	float B = 7;
	float C = 8;
	float W = 9;
}

//ResponseType G2C_Ping
message C2G_Ping // IRequest
{
	int32 RpcId = 90;
}

message G2C_Ping // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;

	int64 Time = 1;
}


message G2C_Test // IMessage
{
}

//ResponseType M2C_Reload
message C2M_Reload // IRequest
{
	int32 RpcId = 90;
	string Account = 1;
	string Password = 2;
}

message M2C_Reload // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType R2C_Login
message C2R_Login // IRequest
{
	int32 RpcId = 90;
	string  Account = 1;  // 帐号
	string  Password = 2;  // 密码
}

message R2C_Login // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string Address = 1;
	int64 Key = 2;
	int64 GateId = 3;
}

//ResponseType G2C_LoginGate
message C2G_LoginGate // IRequest
{
	int32 RpcId = 90;
	int64 Key = 1;  // 帐号
	int64 GateId = 2;
}

message G2C_LoginGate // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int64 PlayerId = 1;
}

message G2C_TestHotfixMessage // IMessage
{
	string Info = 1;
}

//ResponseType M2C_TestRobotCase
message C2M_TestRobotCase // IActorLocationRequest
{
	int32 RpcId = 90;
	int32 N = 1;
}

message M2C_TestRobotCase // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int32 N = 1;
}

//ResponseType M2C_TransferMap
message C2M_TransferMap // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_TransferMap // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType A2C_LoginAccount
message C2A_LoginAccount //IRequest
{
	int32 RpcId = 90;
	string AccountName = 1;
	string Password = 2;
}

message A2C_LoginAccount //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string Token = 1;
	int64 AccountId = 2;
}

message G2C_Disconnect //IMessage
{
	int32 Error = 1;
}

//ResponseType A2C_GetRealmKey
message C2A_GetRealmKey //IRequest
{
	int32 RpcId = 90;
	string Token = 1;
	int64 AccountId = 2;
	int32 ServerId = 3;
}

message A2C_GetRealmKey //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string RealmKey = 1;
	string RealmAddress = 2;
}

//ResponseType R2C_LoginRealm
message C2R_LoginRealm //IRequest
{
	int32 RpcId = 90;
	int64 AccountId = 1;
	string RealmKey = 2;
}

message R2C_LoginRealm //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string GateAddress = 1;
	string GateSessionKey = 2;
}

//ResponseType G2C_LoginGameGate
message C2G_LoginGameGate //IRequest
{
	int32 RpcId = 90;
	string GateKey = 1;
	int64 AccountId = 2;
	int64 RoleId = 3;
}

message G2C_LoginGameGate //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int64 PlayerId = 1;
}

//ResponseType G2C_EnterGame
message C2G_EnterGame //IRequest
{
	int32 RpcId = 90;
	RoleInfoProto roleInfoProto = 1;
}

message G2C_EnterGame //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int64 MyId = 4;
}

//ResponseType G2C_ExitGame
message C2G_ExitGame //IRequest
{
	int32 RpcId = 90;
	int64 AccountId = 1;
}

message G2C_ExitGame //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message RoleInfoProto
{
	int64 Id = 1;
	string Name = 2;
	int64 AccountId = 3;
	string HeadSpriteName = 4;
	string PhotoSpriteName = 5;
	int32 goldCount = 6;
	int32 diamond = 7;
	int64 LastLoginTime = 8;
	int64 CreateTime = 9;
}

//ResponseType A2C_CreateRole
message C2A_CreateRole //IRequest
{
	int32 RpcId = 90;
	string Token = 1;
	int64 AccountId = 2;
	string Name = 3;
	int32 ServerId = 4;
	string headName = 5;
	string charName = 6;
}

message A2C_CreateRole //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	RoleInfoProto RoleInfo = 1;
}

//ResponseType A2C_GetRole
message C2A_GetRole //IRequest
{
	int32 RpcId = 90;
	string Token = 1;
	int64 AccountId = 2;
	int32 ServerId = 3;
}

message A2C_GetRole //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	RoleInfoProto RoleInfo = 1;
}

//ResponseType M2C_Test
message C2M_Test //IActorLocationRequest
{
	int32 RpcId = 90;
}

message M2C_Test //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message UnitLInfo
{
	int64 UnitLId = 1;
	RoleInfoProto RoleInfoProto = 2;
}

message M2C_CreateUnitL // IActorMessage
{
	UnitLInfo UnitLInfo = 1;
}

//ResponseType M2C_StartMatching
message C2M_StartMatching //IActorLocationRequest
{
	int32 RpcId = 90;
}

message M2C_StartMatching //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message M2C_NewUnitLComeIn //IActorMessage
{
	UnitLInfo unitLInfo  = 1;
}

message RoomInfo
{
	int64 RoomId = 1;
	int32 RoomState = 2;
	int32 BasicScore = 3;
	int32 mutiple = 4;
}

message M2C_RoomUnitLInfo //IActorMessage
{
	repeated UnitLInfo infoList = 1;
	RoomInfo roomInfo = 2; 
}


message C2M_UnitLComeOut //IActorLocationMessage
{
	int32 RpcId = 90;
	int64 RoomId = 1;
}

message M2C_UnitLComeOut //IActorMessage
{
	int64 UnitLId = 1;
	bool isRes = 2;
}

message PokerProto
{
	int64 PokerId =  1;
	string pokerName = 2;
	int32 PokerType = 3;
	int32 PokerValue = 4;
}

message M2C_EnterMatchingState //IActorMessage
{
	
}

message M2C_EnterGamingState //IActorMessage
{
	repeated PokerProto PokerProtoList = 1;
	repeated PokerProto keepPokerProtoList = 2;
}

message C2M_CallLordResult //IActorLocationMessage
{
	int32 RpcId = 90;
	bool isCall = 1;
}

message M2C_SetLordCallState //IActorMessage
{
	int64 lordId = 1;
	int64 LastId = 2;
}

message M2C_SetLordRobState //IActorMessage
{
	int64 robId = 1;
	int64 LastId = 2;
	bool isFirst = 3;
	bool isRob = 4;
	int32 Mutiple = 5;
}

message C2M_RobLordResult //IActorLocationMessage
{
	int32 RpcId = 90;
	bool isRob = 1;
}

message M2C_SetAddState //IActorMessage
{
	int32 Mutiple = 1;
	int64 AddId = 2;
	int64 LastId = 3;
}

message C2M_AddLordResult //IActorLocationMessage
{
	int32 RpcId = 90;
	bool isAdd = 1;
}

message M2C_SetAddLordState //IActorMessage
{
	int32 Mutiple = 1;
	int64 AddId = 2;
	int64 LastId = 3;
	bool isAdd = 4;
}

message M2C_EnterFirstRound //IActorMessage
{
	int64 OutId = 1;
	bool trueFirst = 2;
	int32 Mutiple = 3;
	int64 LastId = 4;
}

message C2M_FightInfo //IActorLocationMessage
{
	int32 RpcId = 90;
	repeated PokerProto pokerList = 1;
	int32 PokerListType = 2;
	bool isOut = 3;
}

message M2C_FightInfo //IActorMessage
{
	repeated PokerProto pokerList = 1;
	int32 PokerListType = 2;
	int32 mutiple = 3;
	int64 LastId = 4;
	int32 LastCount = 5;
	int64 nextId = 6;
	bool isOut = 7;
}

message ResultInfo
{
	int64 UnitLId = 1;
	string name = 2;
	int32 deltaGold = 3;
}

message M2C_ResultInfo //IActorMessage
{
	int64 winId = 1;
	repeated ResultInfo resultList = 2;
}

message M2C_UnexpectedDisconnect //IActorMessage
{
	string name = 1;
}